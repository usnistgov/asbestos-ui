{"remainingRequest":"/home/bill/develop/view/node_modules/babel-loader/lib/index.js!/home/bill/develop/view/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/bill/develop/view/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/bill/develop/view/src/components/TestPartNav.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/bill/develop/view/src/components/TestPartNav.vue","mtime":1553175339876},{"path":"/home/bill/develop/view/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/bill/develop/view/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/bill/develop/view/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/bill/develop/view/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.find-index\";\nimport _parseInt from \"/home/bill/develop/view/node_modules/@babel/runtime-corejs2/core-js/parse-int\";\nimport _getIterator from \"/home/bill/develop/view/node_modules/@babel/runtime-corejs2/core-js/get-iterator\";\nimport \"core-js/modules/es6.regexp.to-string\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { newTestPart } from \"../types/test\";\nexport default {\n  data: function data() {\n    return {\n      openPartIds: [],\n      open: false\n    };\n  },\n  props: ['testId', // id of test\n  'type' // element of test - head, variable, setup,  teardown\n  ],\n  computed: {\n    count: function count() {\n      return this.elements(this.testId, this.type).length;\n    }\n  },\n  methods: {\n    variableUrl: function variableUrl(id) {\n      return '/test/' + this.testId + '/variable/' + id;\n    },\n    addNewThingToTest: function addNewThingToTest() {\n      // The type of thing is this.type\n      // assign unique id within this test\n      var testIndex = this.thisTestIndex();\n      var vars = this.$store.state.base.tests[testIndex][this.type];\n      var idi = 1;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _getIterator(vars), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var theVar = _step.value;\n\n          var theVarId = _parseInt(theVar.id);\n\n          if (theVarId > idi) {\n            idi = theVarId;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      var id = (idi + 1).toString(); // name follows id\n\n      var name = '#undefined' + id;\n      var testPart = newTestPart(this.noEndS(this.type));\n      testPart.id = id;\n      testPart.name = name; //testPart.testId = this.testId\n      // store has mutations for installTestPART where\n      // PART is variables | fixtures | ...\n      // calculate PART from this.type\n\n      var part = this.noEndS(this.capitalize(this.type));\n      this.$store.commit('installTest' + part, {\n        testId: this.testId,\n        part: testPart\n      });\n    },\n    noEndS: function noEndS(it) {\n      if (it.substr(-1) === 's') {\n        it = it.slice(0, -1);\n      }\n\n      return it;\n    },\n    capitalize: function capitalize(it) {\n      return it.charAt(0).toUpperCase() + it.slice(1);\n    },\n    openIt: function openIt() {\n      this.open = true;\n    },\n    closeIt: function closeIt() {\n      this.open = false;\n    },\n    elements: function elements(testId, type) {\n      return this.elementsOfTest(testId, type);\n    },\n    thisTestIndex: function thisTestIndex() {\n      var theTestId = this.testId;\n      return this.$store.state.base.tests.findIndex(function (test) {\n        return test.id === theTestId;\n      });\n    },\n    elementsOfTest: function elementsOfTest(testId, type) {\n      // retuns array of fixtures|variables|... based on type\n      var ids = [];\n      this.$store.state.base.tests.forEach(function (test) {\n        ids.push(test.id);\n      });\n      var testIndex = this.$store.state.base.tests.findIndex(function (test) {\n        return test.id === testId;\n      });\n\n      if (testIndex === -1) {\n        throw \"Cannot find test id \".concat(testId, \" in TestPartNav.elementsOfTest\");\n      }\n\n      var test = this.$store.state.base.tests[testIndex];\n\n      switch (type) {\n        case 'heads':\n          return test.heads;\n\n        case 'fixtures':\n          return test.fixtures;\n\n        case 'variables':\n          return test.variables;\n\n        case 'setups':\n          return test.setups;\n\n        case 'tests':\n          return test.tests;\n\n        case 'teardowns':\n          return test.teardowns;\n\n        default:\n          return null;\n      }\n    }\n  }\n};",{"version":3,"sources":["TestPartNav.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div>\n        <img v-if=\"open\" src=\"../assets/arrow-down.png\" @click=\"closeIt\">\n        <img v-else src=\"../assets/arrow-right.png\" @click=\"openIt\">\n        {{ capitalize(type) }}\n        <img src=\"../assets/add-button.png\" @click=\"addNewThingToTest\">\n        <span style=\"color:blue; font-size: 0.8em\"> ({{ count }})</span>\n        <div v-if=\"open\">\n            <div v-for=\"element in elements(testId, type)\" :key=\"element.id\">\n                <router-link class=\"element-nav\" v-bind:to=\"variableUrl(element.id)\">\n                    {{ element.name }}\n                </router-link>\n            </div>\n        </div>\n    </div>\n</template>\n<script>\n    import {newTestPart} from \"../types/test\";\n\n    export default {\n        data() {\n            return {\n                openPartIds: [],\n                open: false\n            }\n        },\n        props: [\n            'testId',  // id of test\n            'type' // element of test - head, variable, setup,  teardown\n            ],\n        computed: {\n            count() {\n                return this.elements(this.testId, this.type).length\n            }\n        },\n        methods: {\n            variableUrl(id) {\n                return '/test/' + this.testId + '/variable/' + id\n            },\n            addNewThingToTest() {\n                // The type of thing is this.type\n\n                // assign unique id within this test\n                const testIndex = this.thisTestIndex()\n                const vars = this.$store.state.base.tests[testIndex][this.type]\n\n                let idi = 1\n                for (let theVar of vars) {\n                    const theVarId = parseInt(theVar.id)\n                    if (theVarId > idi) {\n                        idi = theVarId\n                    }\n                }\n                const id = (idi + 1).toString()\n\n                // name follows id\n                const name = '#undefined' + id\n\n\n                const testPart = newTestPart(this.noEndS(this.type))\n                testPart.id = id\n                testPart.name = name\n                //testPart.testId = this.testId\n\n                // store has mutations for installTestPART where\n                // PART is variables | fixtures | ...\n                // calculate PART from this.type\n                const part = this.noEndS(this.capitalize(this.type))\n                this.$store.commit('installTest' + part, { testId: this.testId, part: testPart })\n            },\n            noEndS(it) {\n                if (it.substr(-1) === 's') {\n                    it = it.slice(0, -1)\n                }\n                return it\n            },\n            capitalize(it) {\n                return it.charAt(0).toUpperCase() + it.slice(1)\n            },\n            openIt() {\n                this.open = true\n            },\n            closeIt() {\n                this.open = false\n            },\n            elements(testId, type) {\n                return this.elementsOfTest(testId, type )\n            },\n            thisTestIndex() {\n                const theTestId = this.testId\n                return this.$store.state.base.tests.findIndex(function (test) {\n                    return test.id === theTestId\n                })\n            },\n            elementsOfTest(testId, type) {\n                // retuns array of fixtures|variables|... based on type\n                let ids = []\n                this.$store.state.base.tests.forEach (function(test) {\n                    ids.push(test.id)\n                })\n                const testIndex = this.$store.state.base.tests.findIndex(function (test) {\n                    return test.id === testId\n                })\n                if (testIndex === -1) { throw `Cannot find test id ${testId} in TestPartNav.elementsOfTest` }\n                const test = this.$store.state.base.tests[testIndex]\n                switch (type) {\n                    case 'heads': return test.heads\n                    case 'fixtures': return test.fixtures\n                    case 'variables': return test.variables\n                    case 'setups': return test.setups\n                    case 'tests': return test.tests\n                    case 'teardowns': return test.teardowns\n                    default: return null\n                }\n            }\n        }\n    }\n</script>\n<style scoped>\n    .element-nav {\n        position: relative;\n        left: 15px;\n    }\n    .router-link-active {\n        background-color: lightblue;\n    }\n</style>\n"],"sourceRoot":"src/components"}]}