{"remainingRequest":"/home/bill/develop/view/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/bill/develop/view/src/components/TestPartNav.vue?vue&type=style&index=0&id=61a73e3e&scoped=true&lang=css&","dependencies":[{"path":"/home/bill/develop/view/src/components/TestPartNav.vue","mtime":1553175339876},{"path":"/home/bill/develop/view/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/bill/develop/view/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/bill/develop/view/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/bill/develop/view/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/bill/develop/view/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.element-nav {\n    position: relative;\n    left: 15px;\n}\n.router-link-active {\n    background-color: lightblue;\n}\n",{"version":3,"sources":["TestPartNav.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuHA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TestPartNav.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div>\n        <img v-if=\"open\" src=\"../assets/arrow-down.png\" @click=\"closeIt\">\n        <img v-else src=\"../assets/arrow-right.png\" @click=\"openIt\">\n        {{ capitalize(type) }}\n        <img src=\"../assets/add-button.png\" @click=\"addNewThingToTest\">\n        <span style=\"color:blue; font-size: 0.8em\"> ({{ count }})</span>\n        <div v-if=\"open\">\n            <div v-for=\"element in elements(testId, type)\" :key=\"element.id\">\n                <router-link class=\"element-nav\" v-bind:to=\"variableUrl(element.id)\">\n                    {{ element.name }}\n                </router-link>\n            </div>\n        </div>\n    </div>\n</template>\n<script>\n    import {newTestPart} from \"../types/test\";\n\n    export default {\n        data() {\n            return {\n                openPartIds: [],\n                open: false\n            }\n        },\n        props: [\n            'testId',  // id of test\n            'type' // element of test - head, variable, setup,  teardown\n            ],\n        computed: {\n            count() {\n                return this.elements(this.testId, this.type).length\n            }\n        },\n        methods: {\n            variableUrl(id) {\n                return '/test/' + this.testId + '/variable/' + id\n            },\n            addNewThingToTest() {\n                // The type of thing is this.type\n\n                // assign unique id within this test\n                const testIndex = this.thisTestIndex()\n                const vars = this.$store.state.base.tests[testIndex][this.type]\n\n                let idi = 1\n                for (let theVar of vars) {\n                    const theVarId = parseInt(theVar.id)\n                    if (theVarId > idi) {\n                        idi = theVarId\n                    }\n                }\n                const id = (idi + 1).toString()\n\n                // name follows id\n                const name = '#undefined' + id\n\n\n                const testPart = newTestPart(this.noEndS(this.type))\n                testPart.id = id\n                testPart.name = name\n                //testPart.testId = this.testId\n\n                // store has mutations for installTestPART where\n                // PART is variables | fixtures | ...\n                // calculate PART from this.type\n                const part = this.noEndS(this.capitalize(this.type))\n                this.$store.commit('installTest' + part, { testId: this.testId, part: testPart })\n            },\n            noEndS(it) {\n                if (it.substr(-1) === 's') {\n                    it = it.slice(0, -1)\n                }\n                return it\n            },\n            capitalize(it) {\n                return it.charAt(0).toUpperCase() + it.slice(1)\n            },\n            openIt() {\n                this.open = true\n            },\n            closeIt() {\n                this.open = false\n            },\n            elements(testId, type) {\n                return this.elementsOfTest(testId, type )\n            },\n            thisTestIndex() {\n                const theTestId = this.testId\n                return this.$store.state.base.tests.findIndex(function (test) {\n                    return test.id === theTestId\n                })\n            },\n            elementsOfTest(testId, type) {\n                // retuns array of fixtures|variables|... based on type\n                let ids = []\n                this.$store.state.base.tests.forEach (function(test) {\n                    ids.push(test.id)\n                })\n                const testIndex = this.$store.state.base.tests.findIndex(function (test) {\n                    return test.id === testId\n                })\n                if (testIndex === -1) { throw `Cannot find test id ${testId} in TestPartNav.elementsOfTest` }\n                const test = this.$store.state.base.tests[testIndex]\n                switch (type) {\n                    case 'heads': return test.heads\n                    case 'fixtures': return test.fixtures\n                    case 'variables': return test.variables\n                    case 'setups': return test.setups\n                    case 'tests': return test.tests\n                    case 'teardowns': return test.teardowns\n                    default: return null\n                }\n            }\n        }\n    }\n</script>\n<style scoped>\n    .element-nav {\n        position: relative;\n        left: 15px;\n    }\n    .router-link-active {\n        background-color: lightblue;\n    }\n</style>\n"]}]}